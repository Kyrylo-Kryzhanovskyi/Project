import asyncio
from telegram_module import TelegramAuth
from preprocessing import load_and_prepare_messages
from classifier import TextClassifier
from report_generator import *
from utils import save_messages, sanitize_filename
import os
import json
import getpass 

async def main():
    print("üëã –í—ñ—Ç–∞—î–º–æ –≤ Telegram-–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É!")
    phone = input("üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ").strip()

    tg = TelegramAuth(phone)
    status = await tg.start()

    if status == 'code_sent':
        code = input("üîê –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–∑ Telegram: ").strip()
        status = await tg.verify_code(code)

        if status == '2fa_needed':
            password = getpass.getpass("üîí –í–≤–µ–¥—ñ—Ç—å 2FA –ø–∞—Ä–æ–ª—å: ")  # –í–≤–æ–¥–∏–º–æ –ø–∞—Ä–æ–ª—å –±–µ–∑ –π–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            status = await tg.verify_password(password)

    if status != 'authorized':
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å. –°—Ç–∞—Ç—É—Å:", status)
        return

    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
    chats = await tg.get_chats(limit=100)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞–Ω–∞–ª—ñ–≤
    last_sel_path = os.path.join("data", phone, "last_selection.json")
    use_saved = False
    saved_selection = []
    if os.path.exists(last_sel_path):
        try:
            with open(last_sel_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                saved_selection = data.get("chats", [])
            if saved_selection:
                use = input("üíæ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞–Ω–∞–ª—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ? (y/n): ").strip().lower()
                if use in ["y", "yes", "—Ç", "tak", "—Ç–∞–∫"]:
                    use_saved = True
        except Exception:
            saved_selection = []
    selected_chats = []
    if use_saved:
        for sel in saved_selection:
            for chat in chats:
                if chat['id'] == sel['id']:
                    selected_chats.append({ 'id': chat['id'], 'title': chat['title'], 'limit': sel.get('limit', 100) })
                    break
        missing = len(saved_selection) - len(selected_chats)
        if missing:
            print(f"‚ö†Ô∏è –î–µ—è–∫—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–∞–Ω–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ ({missing} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ). –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        if not selected_chats:
            print("‚ùå –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–∞–Ω–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏ –≤—Ä—É—á–Ω—É.")
            use_saved = False
    if not use_saved:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Ç–∏/–∫–∞–Ω–∞–ª–∏:")
        for idx, chat in enumerate(chats):
            print(f"{idx + 1}. {chat['title']} ({chat['type']})")
        indices = []
        while not indices:
            selected = input("\nüîé –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ –∫–∞–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3,5): ").strip()
            indices = [int(i.strip()) - 1 for i in selected.split(',') if i.strip().isdigit() and 0 < int(i.strip()) <= len(chats)]
            if not indices:
                print("‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        for idx in indices:
            chat = chats[idx]
            try:
                limit = int(input(f"\nüìå –°–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –∫–∞–Ω–∞–ª—É ¬´{chat['title']}¬ª? ").strip())
            except ValueError:
                limit = 100
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 100")
            selected_chats.append({ 'id': chat['id'], 'title': chat['title'], 'limit': limit })
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª—ñ–∑–æ–º
    print("\n‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏ —Ç–∞–∫—ñ –∫–∞–Ω–∞–ª–∏:")
    for sel in selected_chats:
        print(f"- {sel['title']} (–æ—Å—Ç–∞–Ω–Ω—ñ {sel['limit']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)")
    confirm = input("‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑? (y/n): ").strip().lower()
    if confirm not in ["y", "yes", "—Ç", "tak", "—Ç–∞–∫"]:
        print("‚ö†Ô∏è –ê–Ω–∞–ª—ñ–∑ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        return
    os.makedirs(os.path.join("data", phone), exist_ok=True)
    try:
        with open(last_sel_path, 'w', encoding='utf-8') as f:
            json.dump({"chats": selected_chats}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
    
    classifier = TextClassifier()

    for sel in selected_chats:
        chat_id = sel['id']
        chat_title = sel['title']
        limit = sel['limit']
        print(f"\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É: {chat_title}...")
        messages = await tg.get_messages(chat_id, limit=limit, download_media=False)
        if len(messages) < limit:
            print(f"‚ö†Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ª–∏—à–µ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É \"{chat_title}\" (–∑–∞–ø–∏—Ç—É–≤–∞–ª–æ—Å—å {limit}).")
        save_messages(phone, chat_title, messages)
        filename = f"data/{phone}/messages_{sanitize_filename(chat_title)}.json"
        prepared = load_and_prepare_messages(filename)
        texts = [msg['text'] for msg in prepared]
        if not texts:
            print(f"‚ùå –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –∫–∞–Ω–∞–ª—É ¬´{chat_title}¬ª!")
            continue
        print("üß† –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        results = classifier.classify(texts)
        for result, msg in zip(results, prepared):
            result['id'] = msg['id']
        output_file = filename.replace("messages_", "classified_")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...")
        results_data = load_classification_results(output_file)
        name = safe_dir_name(output_file)
        output_path = create_output_folder("reports", name)
        label_counter, multi_label_counts, scores_per_label, lengths_per_label = summarize_classification(results_data)
        print_summary(label_counter, multi_label_counts, scores_per_label, lengths_per_label, output_path)
        show_top_examples(results_data, output_path)
        show_top_toxic(results_data, output_path)
        save_per_category(results_data, output_path)
        save_bar_chart(label_counter, output_path)

    await tg.disconnect()
    print("\nüèÅ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.")

if __name__ == "__main__":
    asyncio.run(main())
